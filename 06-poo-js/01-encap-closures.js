//-Encapsulamiento con closures
//En programaci√≥n orientada a objetos, **encapsular** significa ocultar los detalles internos 
//de un objeto y exponer solo lo necesario.
//JavaScript no tiene modificadores de acceso como 
// `private` o `protected` (como Java o C#), pero se puede lograr 
// el mismo objetivo con **closures**.

//Un **closure** ocurre cuando una funci√≥n interna **recuerda el entorno** (scope) 
//donde fue creada, **incluso despu√©s de que la funci√≥n externa se haya ejecutado**.
//Esto permite proteger datos del acceso externo, garantizando 
//que solo se pueda interactuar con ellos mediante m√©todos definidos.



function crearContador() 
{
    let contador = 0;//variable privada
    return {
        incrementar:function()
        {
            contador++;
            console.log(contador);
        },
        decrementar:function()
        {
            contador--;
            console.log(contador);
        },
        obtenerValor:function()
        {
            return contador;
        }
    };
}

const miContador = crearContador();
miContador.incrementar();//1
miContador.incrementar();//2
miContador.decrementar();//1
console.log(miContador.obtenerValor());
// miContador.contador = 100; // ‚ùå No se puede acceder directamente
//‚úÖ Explicaci√≥n:

//-contador est√° protegido dentro de crearContador.
//-Solo es accesible mediante los m√©todos p√∫blicos: incrementar, decrementar, obtenerValor.
//-Los m√©todos tienen acceso al entorno donde fueron creados ‚Üí closure.
//----------------------------------------------------------------------
// üéØ Ventajas del encapsulamiento con closures:
// ‚úî Protecci√≥n de datos: impide acceso o modificaci√≥n directa desde fuera.
// ‚úî Control de acceso: solo mediante m√©todos definidos.
// ‚úî Organizaci√≥n y modularidad del c√≥digo.

// -Tips para recordar:
// - Si una funci√≥n accede a una variable externa y la "recuerda", ten√©s un closure.
// - Se usan mucho para crear datos privados, m√≥dulos y funciones seguras.

function crearSaludo(nombre){
    return function(){
        console.log(`Buenos dias, ${nombre}!`);
    };
}
const saludoParaMi = crearSaludo("Romi");
saludoParaMi(); // Hola, Romi!

//'nombre' est√° encapsulado, no se puede cambiar desde fuera.
//Pero se recuerda gracias al closure.
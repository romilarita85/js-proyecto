// --------------------------------------------------------
// Funciones Flecha (Arrow Functions)
// M치s concisas, no tienen su propio this, ni argumentos

//-Funcion clasica:
function sumar(a,b){
    return a + b;
}
//-Funcion flecha:
const sumar = (a,b) => a + b;

//* (a, b): Son los par치metros que la funci칩n espera recibir. 
//En este caso, a y b son los valores que pasas cuando llamas a la funci칩n.

//* =>: Es la flecha que define que estamos usando una funci칩n flecha.

//* a + b: Es la expresi칩n que se eval칰a y se devuelve autom치ticamente 
//sin necesidad de usar return, ya que solo hay una l칤nea de c칩digo.

//Comparaci칩n con funci칩n com칰n:

// Funci칩n tradicional
function saludar(nombre) {
    return "Hola " + nombre;
}
  
  // Funci칩n flecha (es igual pero m치s corta)
const saludar = (nombre) => {
    return "Hola " + nombre;
};
  
  // A칰n m치s corta si es una sola l칤nea (retorno impl칤cito)
const saludar = (nombre) => "Hola " + nombre;
  

// 1. Sintaxis b치sica:
const saludar = () => console.log("Hola mundo");
saludar();

// 2. Con un par치metro (sin par칠ntesis)
//Si solo hay un par치metro, puedes omitir los par칠ntesis:
const cuadrado = x => x * x;
console.log(cuadrado(5)); // 游녤 25

// 3. Con m칰ltiples par치metros (con par칠ntesis)
//Si la funci칩n tiene varios par치metros, se usan los par칠ntesis:
const sumar = (a, b) => a + b;
console.log(sumar(2, 3)); // 游녤 5

// 4. Con m칰ltiples l칤neas (usar llaves y return)
//Si la funci칩n tiene m치s de una l칤nea, se deben usar llaves {} y return expl칤cito:
const resta = (a, b) => {
    let resultado = a - b;
    return resultado;
};
console.log(resta(10, 3)); // 游녤 7
//5. Comportamiento del this en Funciones Flecha
//Las funciones flecha no tienen su propio this. 
//El valor de this se hereda del contexto donde fue creada la funci칩n:

//creamos objeto literal-persona(no uso new)
const persona = {
    nombre: "Romi",
    saludar: function() {
        setTimeout(() => {
            console.log("Hola, soy " + this.nombre); // 'this' apunta a persona
        }, 1000);
    }
};
persona.saludar();

// Record치:
// - Arrow functions son ideales para callbacks y funciones cortas.
// - No se deben usar como m칠todos de objetos si necesit치s `this` propio.
// - Siempre eval칰a si la concisi칩n justifica su uso frente a una funci칩n cl치sica.

// DESESTRUCTURACION DE OBJETOS:

// La desestructuraci√≥n de objetos es una caracter√≠stica de JavaScript que 
// te permite extraer valores de un objeto 
// y asignarlos a variables de forma m√°s concisa y clara. 
// Es una forma m√°s pr√°ctica de trabajar con los datos dentro de un objeto, 
// especialmente cuando solo necesitas algunas propiedades de √©l.

//1- Sintaxis b√°sica de desestructuraci√≥n
// Supongamos que tenemos un objeto como este:
const persona1 = {
  nombre: "Carlos",
  edad: 35,
  profesion1: "Ingeniero"
};

// Puedes desestructurar el objeto de la siguiente manera:
const { nombre, edad, profesion1 } = persona1;

console.log(nombre); // Carlos
console.log(edad); // 35
console.log(profesion1); // Ingeniero

// üîë Explicaci√≥n:
// ‚Ä¢ { nombre, edad, profesion }: Aqu√≠ estamos creando nuevas variables (nombre, edad, profesion) 
// y asign√°ndoles los valores 
//   correspondientes del objeto persona1.
// ‚Ä¢ persona1: Es el objeto del cual estamos extrayendo los valores.
//--------------------------------------------------------------------------------------
//2- Desestructuraci√≥n con alias (renombrando)
// Si quieres usar nombres diferentes para las variables, puedes hacerlo de esta manera:
const { nombre: nombrePersona, edad: edadPersona } = persona1;

console.log(nombrePersona); // Carlos
console.log(edadPersona); // 35

// En este caso, 'nombrePersona' y 'edadPersona' son los nuevos nombres 
// que tomaron los valores del objeto persona1.
//---------------------------------------------------------------------------------------
//3- Desestructuraci√≥n dentro de funciones:
// La desestructuraci√≥n tambi√©n es muy √∫til cuando pasas un objeto como argumento a una funci√≥n. 
// As√≠ puedes extraer solo las propiedades que necesitas directamente:
function mostrarPersona({ nombre, edad }) {
  console.log(`Nombre: ${nombre}, Edad: ${edad}`);
}

mostrarPersona(persona1); // Nombre: Carlos, Edad: 35

//4-üß© Desestructuraci√≥n con objetos anidados
// Cuando tienes objetos anidados, puedes desestructurarlos tambi√©n:
const persona2 = {
  nombre: "Carlos",
  edad: 35,
  direccion: {
    calle: "San Mart√≠n",
    ciudad: "Mendoza"
  }
};

//-Desestructuraci√≥n de objetos anidados
const { nombre: nombrePersona2, direccion: { calle, ciudad } } = persona2;

console.log(calle); // San Mart√≠n
console.log(ciudad); // Mendoza

// En este ejemplo, 'direccion: { calle, ciudad }' nos permite acceder 
// a las propiedades de 'direccion' directamente.

//5-Desestructuraci√≥n con valores por defecto
// Si una propiedad no existe en el objeto, puedes asignarle un valor por defecto:
const persona3 = {
  nombre: "Carlos",
  edad: 35
};

const { nombre: nombre3, profesion = "Desconocida" } = persona3;

console.log(profesion); // Desconocida

// Si 'profesion' no est√° presente en el objeto persona3, se asigna autom√°ticamente el valor "Desconocida".
